<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.boot.mapper.PaymentMapper">

    <!-- 결제 정보를 데이터베이스에 추가하는 SQL -->
    <insert id="insertPaymentInfo" parameterType="com.spring.boot.dto.PaymentInfoDTO">
        INSERT INTO PAYMENTINFO (email, paid_amount, paid_at, pay_method, card_name, card_number, apply_num, name, status)
        VALUES (#{email}, #{paid_amount}, #{paid_at}, #{pay_method,jdbcType=VARCHAR}, #{card_name,jdbcType=VARCHAR}, #{card_number,jdbcType=VARCHAR}, #{apply_num,jdbcType=VARCHAR}, #{name}, #{status})
    </insert>

    <update id="updateOrInsertUserPointWithMap" parameterType="java.util.Map">
    <!-- 해당 이메일 레코드가 존재하는지 확인 -->
    <selectKey resultType="int" keyProperty="count" order="BEFORE">
        SELECT COUNT(*) FROM userPoint WHERE email = #{email}
    </selectKey>
    
    <!-- 레코드가 존재하면 포인트 업데이트 -->
    <choose>
        <when test="count > 0">
            UPDATE userPoint
            SET pointBalance = pointBalance + #{paid_amount}
            WHERE email = #{email}
        </when>
        
            <!-- 레코드가 없으면 새 레코드 생성 -->
            <otherwise>
                INSERT INTO userPoint (email, pointBalance)
                VALUES (#{email}, #{paid_amount})
            </otherwise>
        </choose>
    </update>

    <!-- 사용자의 포인트 잔액 조회 -->
    <select id="getUserPoint" resultType="int" parameterType="String">
        SELECT pointBalance FROM userPoint WHERE email = #{email}
    </select>

    <!-- 해당 email의 결제 내역을 가져오는 SQL -->
    <select id="findByEmail" resultType="com.spring.boot.dto.PaymentInfoDTO" parameterType="String">
        SELECT * FROM PAYMENTINFO WHERE email = #{email} ORDER BY paid_at DESC
    </select>

    <!-- 모임 탈퇴시 포인트 환불 -->
    <update id="updateUserPoint" parameterType="com.spring.boot.dto.userPointDTO">
        update userPoint set pointBalance = pointBalance + #{pointBalance}
        where email = #{email}
    </update>

    <!-- 모임 가입시 포인트 감소 -->
    <update id="updateUserUsePoint" parameterType="com.spring.boot.dto.userPointDTO">
        update userPoint set pointBalance = pointBalance - #{pointBalance}
        where email = #{email}
    </update>

    <!-- 회원 가입 시 포인트 잔액을 0으로 초기화 -->
    <insert id="insertUserAfterSignUp" parameterType="String">
        INSERT INTO userPoint (email, pointBalance)
        VALUES (#{email}, 0)
    </insert>

    <select id="getReadUserPoint" parameterType="String" resultType="com.spring.boot.dto.userPointDTO">
        select * from userPoint where email = #{email}
    </select>

    
    <!-- 추가적인 결제 관련 SQL 문장을 작성할 수 있습니다. -->

</mapper>