<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 여기있는 sql을 호출할 인터페이스 패키지 위치를 정확하게 입력해야 사용이 가능하다. -->
<mapper namespace="com.spring.boot.mapper.GatchiMapper">

<insert id="createGatchi" parameterType="com.spring.boot.dto.GatchiDTO">
    insert into gatchi(
	meetListNum,meetCheck,meetCtgNum,meetName,
    meetTitle,meetContent,meetImage,meetDate,meetDday,
    meetMemCnt,meetMaxMemCnt,meetHitCount,meetLikeCount,
    meetHow,meetEntryfee,meetMoney,meetPlace,meetStatus) values (
	#{meetListNum},#{meetCheck},#{meetCtgNum},#{meetName},
	#{meetTitle},#{meetContent},#{meetImage},sysdate,#{meetDday},
    1,#{meetMaxMemCnt},0,0,
	#{meetHow},#{meetEntryfee},#{meetMoney},#{meetPlace},1)
</insert>

<insert id="createMeetInfo" parameterType="com.spring.boot.dto.MeetInfoDTO">
    insert into meetInfo(meetListNum,email,meetMemStatus) values (#{meetListNum},#{email},1)
</insert>


<select id="getMeetInfo" parameterType="com.spring.boot.dto.MeetInfoDTO">
    select * from meetInfo where meetMemStatus = 1 or meetMemStatus = 2
</select>

<select id="maxNum" resultType="int">
	select nvl(max(meetListNum),0) from gatchi
</select>

<select id="masterPicture" resultType="String">
	select picture from users where email = #{email}
</select>

<!-- <select id="getReadData" parameterType="int" resultType="com.spring.boot.dto.GatchiDTO">
	select * from gatchi 
	where meetListNum=#{meetListNum}
</select> -->

<select id="getMeetMateLists" resultType="com.spring.boot.dto.GatchiDTO">
	select * from gatchi where meetCheck = 1
</select>

<select id="getCommuniFindLists" resultType="com.spring.boot.dto.GatchiDTO">
	select * from gatchi where meetCheck = 2
</select>

<select id="getMeetMateRandomList" parameterType="int" 
	resultType="com.spring.boot.dto.GatchiDTO">
<![CDATA[
	SELECT * FROM (
    	SELECT * FROM gatchi WHERE meetCheck = 1 ORDER BY DBMS_RANDOM.VALUE
	) WHERE ROWNUM <= ${count}
]]>
</select>

<select id="getCommuniFindRandomList" parameterType="int" 
	resultType="com.spring.boot.dto.GatchiDTO">
<![CDATA[
	SELECT * FROM (
    	SELECT * FROM gatchi WHERE meetCheck = 2 ORDER BY DBMS_RANDOM.VALUE
	) WHERE ROWNUM <= ${count}
]]>
</select>

<select id="getRownumList" parameterType="int" resultType="com.spring.boot.dto.GatchiDTO">
	select * from
<![CDATA[
	(select ROWNUM rnum, data.* from (
	select * from GATCHI
	where MEETTITLE like '%%') data)
	where rnum >= 1 and rnum <= ${end}
]]>
</select>


<select id="searchMeetMateList" parameterType="map" resultType="com.spring.boot.dto.GatchiDTO">
    SELECT * FROM gatchi
    WHERE 
	(
        (#{searchKey} = 'meetTitle' AND meetTitle LIKE '%' || #{searchValue} || '%')
        OR
        (#{searchKey} = 'meetDday' AND meetDday LIKE '%' || #{searchValue} || '%')
        OR
        (#{searchKey} = 'meetPlace' AND meetPlace LIKE '%' || #{searchValue} || '%')
    )  AND meetCheck = 1
</select>

<select id="searchCommuniFindList" parameterType="map" resultType="com.spring.boot.dto.GatchiDTO">
    SELECT * FROM gatchi
    WHERE 
	(
        (#{searchKey} = 'meetTitle' AND meetTitle LIKE '%' || #{searchValue} || '%')
        OR
        (#{searchKey} = 'meetDday' AND meetDday LIKE '%' || #{searchValue} || '%')
        OR
        (#{searchKey} = 'meetPlace' AND meetPlace LIKE '%' || #{searchValue} || '%')
    ) AND meetCheck = 2
</select>

<update id="updateMeetStatusMate" parameterType="com.spring.boot.dto.GatchiDTO">
<![CDATA[
	UPDATE GATCHI
	SET meetStatus = 2
	WHERE TO_DATE(meetDday, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE and meetCheck = 1
]]>	
</update>

<update id="updateMeetStatusFind" parameterType="com.spring.boot.dto.GatchiDTO">
<![CDATA[
	UPDATE GATCHI
	SET meetStatus = 2
	WHERE TO_DATE(meetDday, 'YYYY-MM-DD HH24:MI:SS') < SYSDATE and meetCheck = 2
]]>	
</update>


<!--
<select id="getDataCount" parameterType="map" resultType="int">
	select nvl(count(*),0) from board
	where ${searchKey} like '%' || #{searchValue} || '%'
</select>

<select id="meetLikes" parameterType="int">
	select count(*) from gatchiLike 
	where meetListNum = ${meetListNum} and userEmail = ${userEmail}
</select>

<insert id="meetLikeUp">
	insert into gatchiLike (meetListNum,likeCount,userEmail)
	values (#{meetListNum}, #{likecount}=#{likecount}+1, #{userEmail})
</insert>
-->

<!--
public void createMeetmate(MeetmateDTO dto) throws Exception;


<update id="updateHitCount" parameterType="int">
	update board set hitCount=hitCount+1 where num=#{num}
</update>

<insert id="insertData" parameterType="com.spring.boot.dto.BoardDTO">
	insert into board(num,name,pwd,email,subject,content,ipAddr,
	hitCount,created) values (#{num},#{name},#{pwd},#{email},
	#{subject},#{content},#{ipAddr},0,sysdate)
</insert>

map이나 hashMap이나 모두 사용가능 
<select id="getLists" parameterType="hashMap" resultType="com.spring.boot.dto.BoardDTO">
	select * from (
	select rownum rnum, data.* from (
	select num,name,subject,hitCount,to_char(created,'YYYY-MM-DD') created from board 
	where ${searchKey} like '%' || #{searchValue} || '%'
	order by num desc) data)
<![CDATA[
	where rnum>=#{start} and rnum<=#{end}
]]>
</select>






<update id="updateData" parameterType="com.spring.boot.dto.BoardDTO">
	update board set name=#{name},pwd=#{pwd},email=#{email},
	subject=#{subject},content=#{content} where num=#{num}
</update>

<delete id="deleteData" parameterType="int">
	delete board where num=#{num}
</delete>


-->

</mapper>